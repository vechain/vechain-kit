/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  GovernorGovernanceLogic,
  GovernorGovernanceLogicInterface,
} from "../../../../contracts/governance/libraries/GovernorGovernanceLogic";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "GovernorOnlyExecutor",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122084177826a1b10292989e2b0e693c95664f1cd06f12080c14a2e2051dc6caed0964736f6c63430008140033";

type GovernorGovernanceLogicConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GovernorGovernanceLogicConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GovernorGovernanceLogic__factory extends ContractFactory {
  constructor(...args: GovernorGovernanceLogicConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      GovernorGovernanceLogic & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): GovernorGovernanceLogic__factory {
    return super.connect(runner) as GovernorGovernanceLogic__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GovernorGovernanceLogicInterface {
    return new Interface(_abi) as GovernorGovernanceLogicInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): GovernorGovernanceLogic {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as GovernorGovernanceLogic;
  }
}
