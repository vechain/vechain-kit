/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../../common";

export declare namespace VechainNodesDataTypes {
  export type NodeStrengthScoresStruct = {
    strength: BigNumberish;
    thunder: BigNumberish;
    mjolnir: BigNumberish;
    veThorX: BigNumberish;
    strengthX: BigNumberish;
    thunderX: BigNumberish;
    mjolnirX: BigNumberish;
  };

  export type NodeStrengthScoresStructOutput = [
    strength: bigint,
    thunder: bigint,
    mjolnir: bigint,
    veThorX: bigint,
    strengthX: bigint,
    thunderX: bigint,
    mjolnirX: bigint
  ] & {
    strength: bigint;
    thunder: bigint;
    mjolnir: bigint;
    veThorX: bigint;
    strengthX: bigint;
    thunderX: bigint;
    mjolnirX: bigint;
  };
}

export interface EndorsementUtilsInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "AppEndorsed"
      | "AppEndorsementStatusUpdated"
      | "AppUnendorsedGracePeriodStarted"
      | "NodeStrengthScoresUpdated"
  ): EventFragment;
}

export namespace AppEndorsedEvent {
  export type InputTuple = [
    appId: BytesLike,
    endorser: BigNumberish,
    endorsed: boolean
  ];
  export type OutputTuple = [
    appId: string,
    endorser: bigint,
    endorsed: boolean
  ];
  export interface OutputObject {
    appId: string;
    endorser: bigint;
    endorsed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AppEndorsementStatusUpdatedEvent {
  export type InputTuple = [appId: BytesLike, endorsed: boolean];
  export type OutputTuple = [appId: string, endorsed: boolean];
  export interface OutputObject {
    appId: string;
    endorsed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AppUnendorsedGracePeriodStartedEvent {
  export type InputTuple = [
    appId: BytesLike,
    startBlock: BigNumberish,
    endBlock: BigNumberish
  ];
  export type OutputTuple = [
    appId: string,
    startBlock: bigint,
    endBlock: bigint
  ];
  export interface OutputObject {
    appId: string;
    startBlock: bigint;
    endBlock: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NodeStrengthScoresUpdatedEvent {
  export type InputTuple = [
    nodeStrengthScores: VechainNodesDataTypes.NodeStrengthScoresStruct
  ];
  export type OutputTuple = [
    nodeStrengthScores: VechainNodesDataTypes.NodeStrengthScoresStructOutput
  ];
  export interface OutputObject {
    nodeStrengthScores: VechainNodesDataTypes.NodeStrengthScoresStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EndorsementUtils extends BaseContract {
  connect(runner?: ContractRunner | null): EndorsementUtils;
  waitForDeployment(): Promise<this>;

  interface: EndorsementUtilsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "AppEndorsed"
  ): TypedContractEvent<
    AppEndorsedEvent.InputTuple,
    AppEndorsedEvent.OutputTuple,
    AppEndorsedEvent.OutputObject
  >;
  getEvent(
    key: "AppEndorsementStatusUpdated"
  ): TypedContractEvent<
    AppEndorsementStatusUpdatedEvent.InputTuple,
    AppEndorsementStatusUpdatedEvent.OutputTuple,
    AppEndorsementStatusUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "AppUnendorsedGracePeriodStarted"
  ): TypedContractEvent<
    AppUnendorsedGracePeriodStartedEvent.InputTuple,
    AppUnendorsedGracePeriodStartedEvent.OutputTuple,
    AppUnendorsedGracePeriodStartedEvent.OutputObject
  >;
  getEvent(
    key: "NodeStrengthScoresUpdated"
  ): TypedContractEvent<
    NodeStrengthScoresUpdatedEvent.InputTuple,
    NodeStrengthScoresUpdatedEvent.OutputTuple,
    NodeStrengthScoresUpdatedEvent.OutputObject
  >;

  filters: {
    "AppEndorsed(bytes32,uint256,bool)": TypedContractEvent<
      AppEndorsedEvent.InputTuple,
      AppEndorsedEvent.OutputTuple,
      AppEndorsedEvent.OutputObject
    >;
    AppEndorsed: TypedContractEvent<
      AppEndorsedEvent.InputTuple,
      AppEndorsedEvent.OutputTuple,
      AppEndorsedEvent.OutputObject
    >;

    "AppEndorsementStatusUpdated(bytes32,bool)": TypedContractEvent<
      AppEndorsementStatusUpdatedEvent.InputTuple,
      AppEndorsementStatusUpdatedEvent.OutputTuple,
      AppEndorsementStatusUpdatedEvent.OutputObject
    >;
    AppEndorsementStatusUpdated: TypedContractEvent<
      AppEndorsementStatusUpdatedEvent.InputTuple,
      AppEndorsementStatusUpdatedEvent.OutputTuple,
      AppEndorsementStatusUpdatedEvent.OutputObject
    >;

    "AppUnendorsedGracePeriodStarted(bytes32,uint48,uint48)": TypedContractEvent<
      AppUnendorsedGracePeriodStartedEvent.InputTuple,
      AppUnendorsedGracePeriodStartedEvent.OutputTuple,
      AppUnendorsedGracePeriodStartedEvent.OutputObject
    >;
    AppUnendorsedGracePeriodStarted: TypedContractEvent<
      AppUnendorsedGracePeriodStartedEvent.InputTuple,
      AppUnendorsedGracePeriodStartedEvent.OutputTuple,
      AppUnendorsedGracePeriodStartedEvent.OutputObject
    >;

    "NodeStrengthScoresUpdated(tuple)": TypedContractEvent<
      NodeStrengthScoresUpdatedEvent.InputTuple,
      NodeStrengthScoresUpdatedEvent.OutputTuple,
      NodeStrengthScoresUpdatedEvent.OutputObject
    >;
    NodeStrengthScoresUpdated: TypedContractEvent<
      NodeStrengthScoresUpdatedEvent.InputTuple,
      NodeStrengthScoresUpdatedEvent.OutputTuple,
      NodeStrengthScoresUpdatedEvent.OutputObject
    >;
  };
}
