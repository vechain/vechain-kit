/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface XAllocationPoolV3Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "CLOCK_MODE"
      | "CONTRACTS_ADDRESS_MANAGER_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "PERCENTAGE_PRECISION_SCALING_FACTOR"
      | "UPGRADER_ROLE"
      | "UPGRADE_INTERFACE_VERSION"
      | "b3tr"
      | "baseAllocationAmount"
      | "claim"
      | "claimableAmount"
      | "claimed"
      | "clock"
      | "currentRoundEarnings"
      | "emissions"
      | "getAppShares"
      | "getMaxAppAllocation"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isQuadraticFundingDisabledForCurrentRound"
      | "isQuadraticFundingDisabledForRound"
      | "proxiableUUID"
      | "renounceRole"
      | "revokeRole"
      | "roundEarnings"
      | "scaledAppSharesCap"
      | "setEmissionsAddress"
      | "setTreasuryAddress"
      | "setX2EarnAppsAddress"
      | "setXAllocationVotingAddress"
      | "supportsInterface"
      | "toggleQuadraticFunding"
      | "treasury"
      | "upgradeToAndCall"
      | "version"
      | "x2EarnApps"
      | "xAllocationVoting"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AllocationRewardsClaimed"
      | "EmissionsContractSet"
      | "Initialized"
      | "QuadraticFundingToggled"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "TreasuryContractSet"
      | "Upgraded"
      | "X2EarnAppsContractSet"
      | "XAllocationVotingSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CLOCK_MODE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CONTRACTS_ADDRESS_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERCENTAGE_PRECISION_SCALING_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "b3tr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "baseAllocationAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableAmount",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimed",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "clock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "currentRoundEarnings",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "emissions", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAppShares",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxAppAllocation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isQuadraticFundingDisabledForCurrentRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isQuadraticFundingDisabledForRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "roundEarnings",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "scaledAppSharesCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmissionsAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setX2EarnAppsAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setXAllocationVotingAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleQuadraticFunding",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "x2EarnApps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "xAllocationVoting",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "CLOCK_MODE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CONTRACTS_ADDRESS_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERCENTAGE_PRECISION_SCALING_FACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "b3tr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseAllocationAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "clock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentRoundEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "emissions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAppShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxAppAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isQuadraticFundingDisabledForCurrentRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isQuadraticFundingDisabledForRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "roundEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scaledAppSharesCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmissionsAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setX2EarnAppsAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setXAllocationVotingAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleQuadraticFunding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "x2EarnApps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "xAllocationVoting",
    data: BytesLike
  ): Result;
}

export namespace AllocationRewardsClaimedEvent {
  export type InputTuple = [
    appId: BytesLike,
    roundId: BigNumberish,
    totalAmount: BigNumberish,
    recipient: AddressLike,
    caller: AddressLike,
    unallocatedAmount: BigNumberish,
    teamAllocationAmount: BigNumberish,
    rewardsAllocationAmount: BigNumberish
  ];
  export type OutputTuple = [
    appId: string,
    roundId: bigint,
    totalAmount: bigint,
    recipient: string,
    caller: string,
    unallocatedAmount: bigint,
    teamAllocationAmount: bigint,
    rewardsAllocationAmount: bigint
  ];
  export interface OutputObject {
    appId: string;
    roundId: bigint;
    totalAmount: bigint;
    recipient: string;
    caller: string;
    unallocatedAmount: bigint;
    teamAllocationAmount: bigint;
    rewardsAllocationAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmissionsContractSetEvent {
  export type InputTuple = [
    oldContractAddress: AddressLike,
    newContractAddress: AddressLike
  ];
  export type OutputTuple = [
    oldContractAddress: string,
    newContractAddress: string
  ];
  export interface OutputObject {
    oldContractAddress: string;
    newContractAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace QuadraticFundingToggledEvent {
  export type InputTuple = [isDisabled: boolean];
  export type OutputTuple = [isDisabled: boolean];
  export interface OutputObject {
    isDisabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TreasuryContractSetEvent {
  export type InputTuple = [
    oldContractAddress: AddressLike,
    newContractAddress: AddressLike
  ];
  export type OutputTuple = [
    oldContractAddress: string,
    newContractAddress: string
  ];
  export interface OutputObject {
    oldContractAddress: string;
    newContractAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace X2EarnAppsContractSetEvent {
  export type InputTuple = [
    oldContractAddress: AddressLike,
    newContractAddress: AddressLike
  ];
  export type OutputTuple = [
    oldContractAddress: string,
    newContractAddress: string
  ];
  export interface OutputObject {
    oldContractAddress: string;
    newContractAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace XAllocationVotingSetEvent {
  export type InputTuple = [
    oldContractAddress: AddressLike,
    newContractAddress: AddressLike
  ];
  export type OutputTuple = [
    oldContractAddress: string,
    newContractAddress: string
  ];
  export interface OutputObject {
    oldContractAddress: string;
    newContractAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface XAllocationPoolV3 extends BaseContract {
  connect(runner?: ContractRunner | null): XAllocationPoolV3;
  waitForDeployment(): Promise<this>;

  interface: XAllocationPoolV3Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CLOCK_MODE: TypedContractMethod<[], [string], "view">;

  CONTRACTS_ADDRESS_MANAGER_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  PERCENTAGE_PRECISION_SCALING_FACTOR: TypedContractMethod<
    [],
    [bigint],
    "view"
  >;

  UPGRADER_ROLE: TypedContractMethod<[], [string], "view">;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  b3tr: TypedContractMethod<[], [string], "view">;

  baseAllocationAmount: TypedContractMethod<
    [roundId: BigNumberish],
    [bigint],
    "view"
  >;

  claim: TypedContractMethod<
    [roundId: BigNumberish, appId: BytesLike],
    [void],
    "nonpayable"
  >;

  claimableAmount: TypedContractMethod<
    [roundId: BigNumberish, appId: BytesLike],
    [
      [bigint, bigint, bigint, bigint] & {
        totalAmount: bigint;
        unallocatedAmount: bigint;
        teamAllocationAmount: bigint;
        x2EarnRewardsPoolAmount: bigint;
      }
    ],
    "view"
  >;

  claimed: TypedContractMethod<
    [roundId: BigNumberish, appId: BytesLike],
    [boolean],
    "view"
  >;

  clock: TypedContractMethod<[], [bigint], "view">;

  currentRoundEarnings: TypedContractMethod<
    [appId: BytesLike],
    [bigint],
    "view"
  >;

  emissions: TypedContractMethod<[], [string], "view">;

  getAppShares: TypedContractMethod<
    [roundId: BigNumberish, appId: BytesLike],
    [[bigint, bigint]],
    "view"
  >;

  getMaxAppAllocation: TypedContractMethod<
    [roundId: BigNumberish],
    [bigint],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      _admin: AddressLike,
      upgrader: AddressLike,
      contractsAddressManager: AddressLike,
      _b3trAddress: AddressLike,
      _treasury: AddressLike,
      _x2EarnApps: AddressLike,
      _x2EarnRewardsPool: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  isQuadraticFundingDisabledForCurrentRound: TypedContractMethod<
    [],
    [boolean],
    "view"
  >;

  isQuadraticFundingDisabledForRound: TypedContractMethod<
    [roundId: BigNumberish],
    [boolean],
    "view"
  >;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  roundEarnings: TypedContractMethod<
    [roundId: BigNumberish, appId: BytesLike],
    [
      [bigint, bigint, bigint, bigint] & {
        totalAmount: bigint;
        unallocatedAmount: bigint;
        teamAllocationAmount: bigint;
        x2EarnRewardsPoolAmount: bigint;
      }
    ],
    "view"
  >;

  scaledAppSharesCap: TypedContractMethod<
    [roundId: BigNumberish],
    [bigint],
    "view"
  >;

  setEmissionsAddress: TypedContractMethod<
    [emissions_: AddressLike],
    [void],
    "nonpayable"
  >;

  setTreasuryAddress: TypedContractMethod<
    [treasury_: AddressLike],
    [void],
    "nonpayable"
  >;

  setX2EarnAppsAddress: TypedContractMethod<
    [x2EarnApps_: AddressLike],
    [void],
    "nonpayable"
  >;

  setXAllocationVotingAddress: TypedContractMethod<
    [xAllocationVoting_: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  toggleQuadraticFunding: TypedContractMethod<[], [void], "nonpayable">;

  treasury: TypedContractMethod<[], [string], "view">;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  version: TypedContractMethod<[], [string], "view">;

  x2EarnApps: TypedContractMethod<[], [string], "view">;

  xAllocationVoting: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CLOCK_MODE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CONTRACTS_ADDRESS_MANAGER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PERCENTAGE_PRECISION_SCALING_FACTOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "UPGRADER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "b3tr"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "baseAllocationAmount"
  ): TypedContractMethod<[roundId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<
    [roundId: BigNumberish, appId: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimableAmount"
  ): TypedContractMethod<
    [roundId: BigNumberish, appId: BytesLike],
    [
      [bigint, bigint, bigint, bigint] & {
        totalAmount: bigint;
        unallocatedAmount: bigint;
        teamAllocationAmount: bigint;
        x2EarnRewardsPoolAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimed"
  ): TypedContractMethod<
    [roundId: BigNumberish, appId: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "clock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "currentRoundEarnings"
  ): TypedContractMethod<[appId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "emissions"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAppShares"
  ): TypedContractMethod<
    [roundId: BigNumberish, appId: BytesLike],
    [[bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMaxAppAllocation"
  ): TypedContractMethod<[roundId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _admin: AddressLike,
      upgrader: AddressLike,
      contractsAddressManager: AddressLike,
      _b3trAddress: AddressLike,
      _treasury: AddressLike,
      _x2EarnApps: AddressLike,
      _x2EarnRewardsPool: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isQuadraticFundingDisabledForCurrentRound"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isQuadraticFundingDisabledForRound"
  ): TypedContractMethod<[roundId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "roundEarnings"
  ): TypedContractMethod<
    [roundId: BigNumberish, appId: BytesLike],
    [
      [bigint, bigint, bigint, bigint] & {
        totalAmount: bigint;
        unallocatedAmount: bigint;
        teamAllocationAmount: bigint;
        x2EarnRewardsPoolAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "scaledAppSharesCap"
  ): TypedContractMethod<[roundId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "setEmissionsAddress"
  ): TypedContractMethod<[emissions_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTreasuryAddress"
  ): TypedContractMethod<[treasury_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setX2EarnAppsAddress"
  ): TypedContractMethod<[x2EarnApps_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setXAllocationVotingAddress"
  ): TypedContractMethod<
    [xAllocationVoting_: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "toggleQuadraticFunding"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "x2EarnApps"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "xAllocationVoting"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AllocationRewardsClaimed"
  ): TypedContractEvent<
    AllocationRewardsClaimedEvent.InputTuple,
    AllocationRewardsClaimedEvent.OutputTuple,
    AllocationRewardsClaimedEvent.OutputObject
  >;
  getEvent(
    key: "EmissionsContractSet"
  ): TypedContractEvent<
    EmissionsContractSetEvent.InputTuple,
    EmissionsContractSetEvent.OutputTuple,
    EmissionsContractSetEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "QuadraticFundingToggled"
  ): TypedContractEvent<
    QuadraticFundingToggledEvent.InputTuple,
    QuadraticFundingToggledEvent.OutputTuple,
    QuadraticFundingToggledEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "TreasuryContractSet"
  ): TypedContractEvent<
    TreasuryContractSetEvent.InputTuple,
    TreasuryContractSetEvent.OutputTuple,
    TreasuryContractSetEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "X2EarnAppsContractSet"
  ): TypedContractEvent<
    X2EarnAppsContractSetEvent.InputTuple,
    X2EarnAppsContractSetEvent.OutputTuple,
    X2EarnAppsContractSetEvent.OutputObject
  >;
  getEvent(
    key: "XAllocationVotingSet"
  ): TypedContractEvent<
    XAllocationVotingSetEvent.InputTuple,
    XAllocationVotingSetEvent.OutputTuple,
    XAllocationVotingSetEvent.OutputObject
  >;

  filters: {
    "AllocationRewardsClaimed(bytes32,uint256,uint256,address,address,uint256,uint256,uint256)": TypedContractEvent<
      AllocationRewardsClaimedEvent.InputTuple,
      AllocationRewardsClaimedEvent.OutputTuple,
      AllocationRewardsClaimedEvent.OutputObject
    >;
    AllocationRewardsClaimed: TypedContractEvent<
      AllocationRewardsClaimedEvent.InputTuple,
      AllocationRewardsClaimedEvent.OutputTuple,
      AllocationRewardsClaimedEvent.OutputObject
    >;

    "EmissionsContractSet(address,address)": TypedContractEvent<
      EmissionsContractSetEvent.InputTuple,
      EmissionsContractSetEvent.OutputTuple,
      EmissionsContractSetEvent.OutputObject
    >;
    EmissionsContractSet: TypedContractEvent<
      EmissionsContractSetEvent.InputTuple,
      EmissionsContractSetEvent.OutputTuple,
      EmissionsContractSetEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "QuadraticFundingToggled(bool)": TypedContractEvent<
      QuadraticFundingToggledEvent.InputTuple,
      QuadraticFundingToggledEvent.OutputTuple,
      QuadraticFundingToggledEvent.OutputObject
    >;
    QuadraticFundingToggled: TypedContractEvent<
      QuadraticFundingToggledEvent.InputTuple,
      QuadraticFundingToggledEvent.OutputTuple,
      QuadraticFundingToggledEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "TreasuryContractSet(address,address)": TypedContractEvent<
      TreasuryContractSetEvent.InputTuple,
      TreasuryContractSetEvent.OutputTuple,
      TreasuryContractSetEvent.OutputObject
    >;
    TreasuryContractSet: TypedContractEvent<
      TreasuryContractSetEvent.InputTuple,
      TreasuryContractSetEvent.OutputTuple,
      TreasuryContractSetEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "X2EarnAppsContractSet(address,address)": TypedContractEvent<
      X2EarnAppsContractSetEvent.InputTuple,
      X2EarnAppsContractSetEvent.OutputTuple,
      X2EarnAppsContractSetEvent.OutputObject
    >;
    X2EarnAppsContractSet: TypedContractEvent<
      X2EarnAppsContractSetEvent.InputTuple,
      X2EarnAppsContractSetEvent.OutputTuple,
      X2EarnAppsContractSetEvent.OutputObject
    >;

    "XAllocationVotingSet(address,address)": TypedContractEvent<
      XAllocationVotingSetEvent.InputTuple,
      XAllocationVotingSetEvent.OutputTuple,
      XAllocationVotingSetEvent.OutputObject
    >;
    XAllocationVotingSet: TypedContractEvent<
      XAllocationVotingSetEvent.InputTuple,
      XAllocationVotingSetEvent.OutputTuple,
      XAllocationVotingSetEvent.OutputObject
    >;
  };
}
