/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface IVoterRewardsV2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "UPGRADER_ROLE"
      | "UPGRADE_INTERFACE_VERSION"
      | "VOTE_REGISTRAR_ROLE"
      | "b3tr"
      | "claimReward"
      | "cycleToTotal"
      | "cycleToVoterToTotal"
      | "disableQuadraticRewarding"
      | "emissions"
      | "galaxyMember"
      | "getReward"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initializeV2"
      | "isQuadraticRewardingDisabledAtBlock"
      | "isQuadraticRewardingDisabledForCurrentCycle"
      | "levelToMultiplier"
      | "proxiableUUID"
      | "registerVote"
      | "renounceRole"
      | "revokeRole"
      | "scalingFactor"
      | "setEmissions"
      | "setGalaxyMember"
      | "setLevelToMultiplier"
      | "setScalingFactor"
      | "setXallocationVoteRegistrarRole"
      | "supportsInterface"
      | "upgradeToAndCall"
      | "version"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EmissionsAddressUpdated"
      | "GalaxyMemberAddressUpdated"
      | "Initialized"
      | "LevelToMultiplierSet"
      | "QuadraticRewardingDisabled"
      | "RewardClaimed"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Upgraded"
      | "VoteRegistered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VOTE_REGISTRAR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "b3tr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cycleToTotal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cycleToVoterToTotal",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "disableQuadraticRewarding",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "emissions", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "galaxyMember",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReward",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeV2",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "isQuadraticRewardingDisabledAtBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isQuadraticRewardingDisabledForCurrentCycle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "levelToMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerVote",
    values: [BigNumberish, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "scalingFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setEmissions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setGalaxyMember",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLevelToMultiplier",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setScalingFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setXallocationVoteRegistrarRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VOTE_REGISTRAR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "b3tr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cycleToTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cycleToVoterToTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableQuadraticRewarding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "emissions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "galaxyMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isQuadraticRewardingDisabledAtBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isQuadraticRewardingDisabledForCurrentCycle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "levelToMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "scalingFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGalaxyMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLevelToMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setScalingFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setXallocationVoteRegistrarRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace EmissionsAddressUpdatedEvent {
  export type InputTuple = [newAddress: AddressLike, oldAddress: AddressLike];
  export type OutputTuple = [newAddress: string, oldAddress: string];
  export interface OutputObject {
    newAddress: string;
    oldAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GalaxyMemberAddressUpdatedEvent {
  export type InputTuple = [newAddress: AddressLike, oldAddress: AddressLike];
  export type OutputTuple = [newAddress: string, oldAddress: string];
  export interface OutputObject {
    newAddress: string;
    oldAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LevelToMultiplierSetEvent {
  export type InputTuple = [level: BigNumberish, multiplier: BigNumberish];
  export type OutputTuple = [level: bigint, multiplier: bigint];
  export interface OutputObject {
    level: bigint;
    multiplier: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace QuadraticRewardingDisabledEvent {
  export type InputTuple = [disabled: boolean];
  export type OutputTuple = [disabled: boolean];
  export interface OutputObject {
    disabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardClaimedEvent {
  export type InputTuple = [
    cycle: BigNumberish,
    voter: AddressLike,
    reward: BigNumberish
  ];
  export type OutputTuple = [cycle: bigint, voter: string, reward: bigint];
  export interface OutputObject {
    cycle: bigint;
    voter: string;
    reward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteRegisteredEvent {
  export type InputTuple = [
    cycle: BigNumberish,
    voter: AddressLike,
    votes: BigNumberish,
    rewardWeightedVote: BigNumberish
  ];
  export type OutputTuple = [
    cycle: bigint,
    voter: string,
    votes: bigint,
    rewardWeightedVote: bigint
  ];
  export interface OutputObject {
    cycle: bigint;
    voter: string;
    votes: bigint;
    rewardWeightedVote: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IVoterRewardsV2 extends BaseContract {
  connect(runner?: ContractRunner | null): IVoterRewardsV2;
  waitForDeployment(): Promise<this>;

  interface: IVoterRewardsV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  UPGRADER_ROLE: TypedContractMethod<[], [string], "view">;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  VOTE_REGISTRAR_ROLE: TypedContractMethod<[], [string], "view">;

  b3tr: TypedContractMethod<[], [string], "view">;

  claimReward: TypedContractMethod<
    [cycle: BigNumberish, voter: AddressLike],
    [void],
    "nonpayable"
  >;

  cycleToTotal: TypedContractMethod<[cycle: BigNumberish], [bigint], "view">;

  cycleToVoterToTotal: TypedContractMethod<
    [cycle: BigNumberish, voter: AddressLike],
    [bigint],
    "view"
  >;

  disableQuadraticRewarding: TypedContractMethod<
    [_disableQuadraticRewarding: boolean],
    [void],
    "nonpayable"
  >;

  emissions: TypedContractMethod<[], [string], "view">;

  galaxyMember: TypedContractMethod<[], [string], "view">;

  getReward: TypedContractMethod<
    [cycle: BigNumberish, voter: AddressLike],
    [bigint],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initializeV2: TypedContractMethod<
    [_quadraticRewardingFlag: boolean],
    [void],
    "nonpayable"
  >;

  isQuadraticRewardingDisabledAtBlock: TypedContractMethod<
    [blockNumber: BigNumberish],
    [boolean],
    "view"
  >;

  isQuadraticRewardingDisabledForCurrentCycle: TypedContractMethod<
    [],
    [boolean],
    "view"
  >;

  levelToMultiplier: TypedContractMethod<
    [level: BigNumberish],
    [bigint],
    "view"
  >;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  registerVote: TypedContractMethod<
    [
      proposalStart: BigNumberish,
      voter: AddressLike,
      votes: BigNumberish,
      votePower: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  scalingFactor: TypedContractMethod<[], [bigint], "view">;

  setEmissions: TypedContractMethod<
    [_emissions: AddressLike],
    [void],
    "nonpayable"
  >;

  setGalaxyMember: TypedContractMethod<
    [_galaxyMember: AddressLike],
    [void],
    "nonpayable"
  >;

  setLevelToMultiplier: TypedContractMethod<
    [level: BigNumberish, multiplier: BigNumberish],
    [void],
    "nonpayable"
  >;

  setScalingFactor: TypedContractMethod<
    [newScalingFactor: BigNumberish],
    [void],
    "nonpayable"
  >;

  setXallocationVoteRegistrarRole: TypedContractMethod<
    [_voteRegistrar: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  version: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UPGRADER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VOTE_REGISTRAR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "b3tr"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "claimReward"
  ): TypedContractMethod<
    [cycle: BigNumberish, voter: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cycleToTotal"
  ): TypedContractMethod<[cycle: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "cycleToVoterToTotal"
  ): TypedContractMethod<
    [cycle: BigNumberish, voter: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "disableQuadraticRewarding"
  ): TypedContractMethod<
    [_disableQuadraticRewarding: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emissions"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "galaxyMember"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getReward"
  ): TypedContractMethod<
    [cycle: BigNumberish, voter: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initializeV2"
  ): TypedContractMethod<
    [_quadraticRewardingFlag: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isQuadraticRewardingDisabledAtBlock"
  ): TypedContractMethod<[blockNumber: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isQuadraticRewardingDisabledForCurrentCycle"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "levelToMultiplier"
  ): TypedContractMethod<[level: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerVote"
  ): TypedContractMethod<
    [
      proposalStart: BigNumberish,
      voter: AddressLike,
      votes: BigNumberish,
      votePower: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "scalingFactor"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setEmissions"
  ): TypedContractMethod<[_emissions: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setGalaxyMember"
  ): TypedContractMethod<[_galaxyMember: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLevelToMultiplier"
  ): TypedContractMethod<
    [level: BigNumberish, multiplier: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setScalingFactor"
  ): TypedContractMethod<
    [newScalingFactor: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setXallocationVoteRegistrarRole"
  ): TypedContractMethod<[_voteRegistrar: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "EmissionsAddressUpdated"
  ): TypedContractEvent<
    EmissionsAddressUpdatedEvent.InputTuple,
    EmissionsAddressUpdatedEvent.OutputTuple,
    EmissionsAddressUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "GalaxyMemberAddressUpdated"
  ): TypedContractEvent<
    GalaxyMemberAddressUpdatedEvent.InputTuple,
    GalaxyMemberAddressUpdatedEvent.OutputTuple,
    GalaxyMemberAddressUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "LevelToMultiplierSet"
  ): TypedContractEvent<
    LevelToMultiplierSetEvent.InputTuple,
    LevelToMultiplierSetEvent.OutputTuple,
    LevelToMultiplierSetEvent.OutputObject
  >;
  getEvent(
    key: "QuadraticRewardingDisabled"
  ): TypedContractEvent<
    QuadraticRewardingDisabledEvent.InputTuple,
    QuadraticRewardingDisabledEvent.OutputTuple,
    QuadraticRewardingDisabledEvent.OutputObject
  >;
  getEvent(
    key: "RewardClaimed"
  ): TypedContractEvent<
    RewardClaimedEvent.InputTuple,
    RewardClaimedEvent.OutputTuple,
    RewardClaimedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "VoteRegistered"
  ): TypedContractEvent<
    VoteRegisteredEvent.InputTuple,
    VoteRegisteredEvent.OutputTuple,
    VoteRegisteredEvent.OutputObject
  >;

  filters: {
    "EmissionsAddressUpdated(address,address)": TypedContractEvent<
      EmissionsAddressUpdatedEvent.InputTuple,
      EmissionsAddressUpdatedEvent.OutputTuple,
      EmissionsAddressUpdatedEvent.OutputObject
    >;
    EmissionsAddressUpdated: TypedContractEvent<
      EmissionsAddressUpdatedEvent.InputTuple,
      EmissionsAddressUpdatedEvent.OutputTuple,
      EmissionsAddressUpdatedEvent.OutputObject
    >;

    "GalaxyMemberAddressUpdated(address,address)": TypedContractEvent<
      GalaxyMemberAddressUpdatedEvent.InputTuple,
      GalaxyMemberAddressUpdatedEvent.OutputTuple,
      GalaxyMemberAddressUpdatedEvent.OutputObject
    >;
    GalaxyMemberAddressUpdated: TypedContractEvent<
      GalaxyMemberAddressUpdatedEvent.InputTuple,
      GalaxyMemberAddressUpdatedEvent.OutputTuple,
      GalaxyMemberAddressUpdatedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "LevelToMultiplierSet(uint256,uint256)": TypedContractEvent<
      LevelToMultiplierSetEvent.InputTuple,
      LevelToMultiplierSetEvent.OutputTuple,
      LevelToMultiplierSetEvent.OutputObject
    >;
    LevelToMultiplierSet: TypedContractEvent<
      LevelToMultiplierSetEvent.InputTuple,
      LevelToMultiplierSetEvent.OutputTuple,
      LevelToMultiplierSetEvent.OutputObject
    >;

    "QuadraticRewardingDisabled(bool)": TypedContractEvent<
      QuadraticRewardingDisabledEvent.InputTuple,
      QuadraticRewardingDisabledEvent.OutputTuple,
      QuadraticRewardingDisabledEvent.OutputObject
    >;
    QuadraticRewardingDisabled: TypedContractEvent<
      QuadraticRewardingDisabledEvent.InputTuple,
      QuadraticRewardingDisabledEvent.OutputTuple,
      QuadraticRewardingDisabledEvent.OutputObject
    >;

    "RewardClaimed(uint256,address,uint256)": TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;
    RewardClaimed: TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "VoteRegistered(uint256,address,uint256,uint256)": TypedContractEvent<
      VoteRegisteredEvent.InputTuple,
      VoteRegisteredEvent.OutputTuple,
      VoteRegisteredEvent.OutputObject
    >;
    VoteRegistered: TypedContractEvent<
      VoteRegisteredEvent.InputTuple,
      VoteRegisteredEvent.OutputTuple,
      VoteRegisteredEvent.OutputObject
    >;
  };
}
