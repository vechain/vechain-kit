/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../../../../common";

export interface GovernorConfiguratorV1Interface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "DepositThresholdSet"
      | "MinVotingDelaySet"
      | "TimelockChange"
      | "VoterRewardsSet"
      | "VotingThresholdSet"
      | "XAllocationVotingSet"
  ): EventFragment;
}

export namespace DepositThresholdSetEvent {
  export type InputTuple = [
    oldDepositThreshold: BigNumberish,
    newDepositThreshold: BigNumberish
  ];
  export type OutputTuple = [
    oldDepositThreshold: bigint,
    newDepositThreshold: bigint
  ];
  export interface OutputObject {
    oldDepositThreshold: bigint;
    newDepositThreshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinVotingDelaySetEvent {
  export type InputTuple = [
    oldMinMinVotingDelay: BigNumberish,
    newMinVotingDelay: BigNumberish
  ];
  export type OutputTuple = [
    oldMinMinVotingDelay: bigint,
    newMinVotingDelay: bigint
  ];
  export interface OutputObject {
    oldMinMinVotingDelay: bigint;
    newMinVotingDelay: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TimelockChangeEvent {
  export type InputTuple = [oldTimelock: AddressLike, newTimelock: AddressLike];
  export type OutputTuple = [oldTimelock: string, newTimelock: string];
  export interface OutputObject {
    oldTimelock: string;
    newTimelock: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoterRewardsSetEvent {
  export type InputTuple = [
    oldContractAddress: AddressLike,
    newContractAddress: AddressLike
  ];
  export type OutputTuple = [
    oldContractAddress: string,
    newContractAddress: string
  ];
  export interface OutputObject {
    oldContractAddress: string;
    newContractAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingThresholdSetEvent {
  export type InputTuple = [
    oldVotingThreshold: BigNumberish,
    newVotingThreshold: BigNumberish
  ];
  export type OutputTuple = [
    oldVotingThreshold: bigint,
    newVotingThreshold: bigint
  ];
  export interface OutputObject {
    oldVotingThreshold: bigint;
    newVotingThreshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace XAllocationVotingSetEvent {
  export type InputTuple = [
    oldContractAddress: AddressLike,
    newContractAddress: AddressLike
  ];
  export type OutputTuple = [
    oldContractAddress: string,
    newContractAddress: string
  ];
  export interface OutputObject {
    oldContractAddress: string;
    newContractAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GovernorConfiguratorV1 extends BaseContract {
  connect(runner?: ContractRunner | null): GovernorConfiguratorV1;
  waitForDeployment(): Promise<this>;

  interface: GovernorConfiguratorV1Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "DepositThresholdSet"
  ): TypedContractEvent<
    DepositThresholdSetEvent.InputTuple,
    DepositThresholdSetEvent.OutputTuple,
    DepositThresholdSetEvent.OutputObject
  >;
  getEvent(
    key: "MinVotingDelaySet"
  ): TypedContractEvent<
    MinVotingDelaySetEvent.InputTuple,
    MinVotingDelaySetEvent.OutputTuple,
    MinVotingDelaySetEvent.OutputObject
  >;
  getEvent(
    key: "TimelockChange"
  ): TypedContractEvent<
    TimelockChangeEvent.InputTuple,
    TimelockChangeEvent.OutputTuple,
    TimelockChangeEvent.OutputObject
  >;
  getEvent(
    key: "VoterRewardsSet"
  ): TypedContractEvent<
    VoterRewardsSetEvent.InputTuple,
    VoterRewardsSetEvent.OutputTuple,
    VoterRewardsSetEvent.OutputObject
  >;
  getEvent(
    key: "VotingThresholdSet"
  ): TypedContractEvent<
    VotingThresholdSetEvent.InputTuple,
    VotingThresholdSetEvent.OutputTuple,
    VotingThresholdSetEvent.OutputObject
  >;
  getEvent(
    key: "XAllocationVotingSet"
  ): TypedContractEvent<
    XAllocationVotingSetEvent.InputTuple,
    XAllocationVotingSetEvent.OutputTuple,
    XAllocationVotingSetEvent.OutputObject
  >;

  filters: {
    "DepositThresholdSet(uint256,uint256)": TypedContractEvent<
      DepositThresholdSetEvent.InputTuple,
      DepositThresholdSetEvent.OutputTuple,
      DepositThresholdSetEvent.OutputObject
    >;
    DepositThresholdSet: TypedContractEvent<
      DepositThresholdSetEvent.InputTuple,
      DepositThresholdSetEvent.OutputTuple,
      DepositThresholdSetEvent.OutputObject
    >;

    "MinVotingDelaySet(uint256,uint256)": TypedContractEvent<
      MinVotingDelaySetEvent.InputTuple,
      MinVotingDelaySetEvent.OutputTuple,
      MinVotingDelaySetEvent.OutputObject
    >;
    MinVotingDelaySet: TypedContractEvent<
      MinVotingDelaySetEvent.InputTuple,
      MinVotingDelaySetEvent.OutputTuple,
      MinVotingDelaySetEvent.OutputObject
    >;

    "TimelockChange(address,address)": TypedContractEvent<
      TimelockChangeEvent.InputTuple,
      TimelockChangeEvent.OutputTuple,
      TimelockChangeEvent.OutputObject
    >;
    TimelockChange: TypedContractEvent<
      TimelockChangeEvent.InputTuple,
      TimelockChangeEvent.OutputTuple,
      TimelockChangeEvent.OutputObject
    >;

    "VoterRewardsSet(address,address)": TypedContractEvent<
      VoterRewardsSetEvent.InputTuple,
      VoterRewardsSetEvent.OutputTuple,
      VoterRewardsSetEvent.OutputObject
    >;
    VoterRewardsSet: TypedContractEvent<
      VoterRewardsSetEvent.InputTuple,
      VoterRewardsSetEvent.OutputTuple,
      VoterRewardsSetEvent.OutputObject
    >;

    "VotingThresholdSet(uint256,uint256)": TypedContractEvent<
      VotingThresholdSetEvent.InputTuple,
      VotingThresholdSetEvent.OutputTuple,
      VotingThresholdSetEvent.OutputObject
    >;
    VotingThresholdSet: TypedContractEvent<
      VotingThresholdSetEvent.InputTuple,
      VotingThresholdSetEvent.OutputTuple,
      VotingThresholdSetEvent.OutputObject
    >;

    "XAllocationVotingSet(address,address)": TypedContractEvent<
      XAllocationVotingSetEvent.InputTuple,
      XAllocationVotingSetEvent.OutputTuple,
      XAllocationVotingSetEvent.OutputObject
    >;
    XAllocationVotingSet: TypedContractEvent<
      XAllocationVotingSetEvent.InputTuple,
      XAllocationVotingSetEvent.OutputTuple,
      XAllocationVotingSetEvent.OutputObject
    >;
  };
}
