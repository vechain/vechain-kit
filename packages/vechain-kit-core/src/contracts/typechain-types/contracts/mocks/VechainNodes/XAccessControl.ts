/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface XAccessControlInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addOperator"
      | "addToBlackList"
      | "blackList"
      | "operators"
      | "owner"
      | "pause"
      | "paused"
      | "removeFromBlackList"
      | "removeOperator"
      | "transferOwnership"
      | "unpause"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BlackListUpdated"
      | "OperatorUpdated"
      | "OwnershipTransferred"
      | "Pause"
      | "ProtocolUpgrade"
      | "Unpause"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addToBlackList",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "blackList",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "operators",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeFromBlackList",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToBlackList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "blackList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "operators", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeFromBlackList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
}

export namespace BlackListUpdatedEvent {
  export type InputTuple = [_person: AddressLike, _op: boolean];
  export type OutputTuple = [_person: string, _op: boolean];
  export interface OutputObject {
    _person: string;
    _op: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperatorUpdatedEvent {
  export type InputTuple = [_op: AddressLike, _enabled: boolean];
  export type OutputTuple = [_op: string, _enabled: boolean];
  export interface OutputObject {
    _op: string;
    _enabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PauseEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtocolUpgradeEvent {
  export type InputTuple = [_saleAuction: AddressLike];
  export type OutputTuple = [_saleAuction: string];
  export interface OutputObject {
    _saleAuction: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpauseEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface XAccessControl extends BaseContract {
  connect(runner?: ContractRunner | null): XAccessControl;
  waitForDeployment(): Promise<this>;

  interface: XAccessControlInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addOperator: TypedContractMethod<
    [_operator: AddressLike],
    [void],
    "nonpayable"
  >;

  addToBlackList: TypedContractMethod<
    [_badGuy: AddressLike],
    [void],
    "nonpayable"
  >;

  blackList: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  operators: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [boolean], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  removeFromBlackList: TypedContractMethod<
    [_innocent: AddressLike],
    [void],
    "nonpayable"
  >;

  removeOperator: TypedContractMethod<
    [_operator: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [boolean], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addOperator"
  ): TypedContractMethod<[_operator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addToBlackList"
  ): TypedContractMethod<[_badGuy: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "blackList"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "operators"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeFromBlackList"
  ): TypedContractMethod<[_innocent: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeOperator"
  ): TypedContractMethod<[_operator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [boolean], "nonpayable">;

  getEvent(
    key: "BlackListUpdated"
  ): TypedContractEvent<
    BlackListUpdatedEvent.InputTuple,
    BlackListUpdatedEvent.OutputTuple,
    BlackListUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OperatorUpdated"
  ): TypedContractEvent<
    OperatorUpdatedEvent.InputTuple,
    OperatorUpdatedEvent.OutputTuple,
    OperatorUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Pause"
  ): TypedContractEvent<
    PauseEvent.InputTuple,
    PauseEvent.OutputTuple,
    PauseEvent.OutputObject
  >;
  getEvent(
    key: "ProtocolUpgrade"
  ): TypedContractEvent<
    ProtocolUpgradeEvent.InputTuple,
    ProtocolUpgradeEvent.OutputTuple,
    ProtocolUpgradeEvent.OutputObject
  >;
  getEvent(
    key: "Unpause"
  ): TypedContractEvent<
    UnpauseEvent.InputTuple,
    UnpauseEvent.OutputTuple,
    UnpauseEvent.OutputObject
  >;

  filters: {
    "BlackListUpdated(address,bool)": TypedContractEvent<
      BlackListUpdatedEvent.InputTuple,
      BlackListUpdatedEvent.OutputTuple,
      BlackListUpdatedEvent.OutputObject
    >;
    BlackListUpdated: TypedContractEvent<
      BlackListUpdatedEvent.InputTuple,
      BlackListUpdatedEvent.OutputTuple,
      BlackListUpdatedEvent.OutputObject
    >;

    "OperatorUpdated(address,bool)": TypedContractEvent<
      OperatorUpdatedEvent.InputTuple,
      OperatorUpdatedEvent.OutputTuple,
      OperatorUpdatedEvent.OutputObject
    >;
    OperatorUpdated: TypedContractEvent<
      OperatorUpdatedEvent.InputTuple,
      OperatorUpdatedEvent.OutputTuple,
      OperatorUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Pause()": TypedContractEvent<
      PauseEvent.InputTuple,
      PauseEvent.OutputTuple,
      PauseEvent.OutputObject
    >;
    Pause: TypedContractEvent<
      PauseEvent.InputTuple,
      PauseEvent.OutputTuple,
      PauseEvent.OutputObject
    >;

    "ProtocolUpgrade(address)": TypedContractEvent<
      ProtocolUpgradeEvent.InputTuple,
      ProtocolUpgradeEvent.OutputTuple,
      ProtocolUpgradeEvent.OutputObject
    >;
    ProtocolUpgrade: TypedContractEvent<
      ProtocolUpgradeEvent.InputTuple,
      ProtocolUpgradeEvent.OutputTuple,
      ProtocolUpgradeEvent.OutputObject
    >;

    "Unpause()": TypedContractEvent<
      UnpauseEvent.InputTuple,
      UnpauseEvent.OutputTuple,
      UnpauseEvent.OutputObject
    >;
    Unpause: TypedContractEvent<
      UnpauseEvent.InputTuple,
      UnpauseEvent.OutputTuple,
      UnpauseEvent.OutputObject
    >;
  };
}
