/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface ClockAuctionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "VIP181"
      | "addAuctionWhiteList"
      | "bid"
      | "cancelAuction"
      | "createAuction"
      | "exist"
      | "feePercnt"
      | "feePool"
      | "getAuction"
      | "getCurrentPrice"
      | "hasWhiteList"
      | "inWhiteList"
      | "isOnAuction"
      | "owner"
      | "pause"
      | "paused"
      | "removeAuctionWhiteList"
      | "setFeePercent"
      | "setFeePoolAddress"
      | "transferOwnership"
      | "unpause"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FeePercentUpdated"
      | "FeePoolAddressUpdated"
      | "OwnershipTransferred"
      | "Pause"
      | "Unpause"
  ): EventFragment;

  encodeFunctionData(functionFragment: "VIP181", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addAuctionWhiteList",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bid",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createAuction",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "exist", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "feePercnt", values?: undefined): string;
  encodeFunctionData(functionFragment: "feePool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasWhiteList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "inWhiteList",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isOnAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeAuctionWhiteList",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeePoolAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(functionFragment: "VIP181", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addAuctionWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exist", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feePercnt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAuction", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOnAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAuctionWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeePoolAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
}

export namespace FeePercentUpdatedEvent {
  export type InputTuple = [_newPercent: BigNumberish];
  export type OutputTuple = [_newPercent: bigint];
  export interface OutputObject {
    _newPercent: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeePoolAddressUpdatedEvent {
  export type InputTuple = [_newFeePoolAddr: AddressLike];
  export type OutputTuple = [_newFeePoolAddr: string];
  export interface OutputObject {
    _newFeePoolAddr: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PauseEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpauseEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ClockAuction extends BaseContract {
  connect(runner?: ContractRunner | null): ClockAuction;
  waitForDeployment(): Promise<this>;

  interface: ClockAuctionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  VIP181: TypedContractMethod<[], [string], "view">;

  addAuctionWhiteList: TypedContractMethod<
    [_tokenId: BigNumberish, _address: AddressLike],
    [void],
    "nonpayable"
  >;

  bid: TypedContractMethod<
    [_buyer: AddressLike, _tokenId: BigNumberish],
    [bigint],
    "payable"
  >;

  cancelAuction: TypedContractMethod<
    [_tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createAuction: TypedContractMethod<
    [
      _auctionId: BigNumberish,
      _tokenId: BigNumberish,
      _startingPrice: BigNumberish,
      _endingPrice: BigNumberish,
      _duration: BigNumberish,
      _startedAt: BigNumberish,
      _seller: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  exist: TypedContractMethod<[_tokenId: BigNumberish], [boolean], "view">;

  feePercnt: TypedContractMethod<[], [bigint], "view">;

  feePool: TypedContractMethod<[], [string], "view">;

  getAuction: TypedContractMethod<
    [_tokenId: BigNumberish],
    [
      [bigint, string, bigint, bigint, bigint, bigint] & {
        autionId: bigint;
        seller: string;
        startingPrice: bigint;
        endingPrice: bigint;
        duration: bigint;
        startedAt: bigint;
      }
    ],
    "view"
  >;

  getCurrentPrice: TypedContractMethod<
    [_tokenId: BigNumberish],
    [bigint],
    "view"
  >;

  hasWhiteList: TypedContractMethod<
    [_tokenId: BigNumberish],
    [boolean],
    "view"
  >;

  inWhiteList: TypedContractMethod<
    [_tokenId: BigNumberish, _address: AddressLike],
    [boolean],
    "view"
  >;

  isOnAuction: TypedContractMethod<[_tokenId: BigNumberish], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [boolean], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  removeAuctionWhiteList: TypedContractMethod<
    [_tokenId: BigNumberish, _address: AddressLike],
    [void],
    "nonpayable"
  >;

  setFeePercent: TypedContractMethod<
    [_newPercent: BigNumberish],
    [void],
    "nonpayable"
  >;

  setFeePoolAddress: TypedContractMethod<
    [_newFeePoolAddr: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [boolean], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "VIP181"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addAuctionWhiteList"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _address: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "bid"
  ): TypedContractMethod<
    [_buyer: AddressLike, _tokenId: BigNumberish],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "cancelAuction"
  ): TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createAuction"
  ): TypedContractMethod<
    [
      _auctionId: BigNumberish,
      _tokenId: BigNumberish,
      _startingPrice: BigNumberish,
      _endingPrice: BigNumberish,
      _duration: BigNumberish,
      _startedAt: BigNumberish,
      _seller: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "exist"
  ): TypedContractMethod<[_tokenId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "feePercnt"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "feePool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAuction"
  ): TypedContractMethod<
    [_tokenId: BigNumberish],
    [
      [bigint, string, bigint, bigint, bigint, bigint] & {
        autionId: bigint;
        seller: string;
        startingPrice: bigint;
        endingPrice: bigint;
        duration: bigint;
        startedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentPrice"
  ): TypedContractMethod<[_tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasWhiteList"
  ): TypedContractMethod<[_tokenId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "inWhiteList"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _address: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isOnAuction"
  ): TypedContractMethod<[_tokenId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeAuctionWhiteList"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _address: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFeePercent"
  ): TypedContractMethod<[_newPercent: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeePoolAddress"
  ): TypedContractMethod<[_newFeePoolAddr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [boolean], "nonpayable">;

  getEvent(
    key: "FeePercentUpdated"
  ): TypedContractEvent<
    FeePercentUpdatedEvent.InputTuple,
    FeePercentUpdatedEvent.OutputTuple,
    FeePercentUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FeePoolAddressUpdated"
  ): TypedContractEvent<
    FeePoolAddressUpdatedEvent.InputTuple,
    FeePoolAddressUpdatedEvent.OutputTuple,
    FeePoolAddressUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Pause"
  ): TypedContractEvent<
    PauseEvent.InputTuple,
    PauseEvent.OutputTuple,
    PauseEvent.OutputObject
  >;
  getEvent(
    key: "Unpause"
  ): TypedContractEvent<
    UnpauseEvent.InputTuple,
    UnpauseEvent.OutputTuple,
    UnpauseEvent.OutputObject
  >;

  filters: {
    "FeePercentUpdated(uint8)": TypedContractEvent<
      FeePercentUpdatedEvent.InputTuple,
      FeePercentUpdatedEvent.OutputTuple,
      FeePercentUpdatedEvent.OutputObject
    >;
    FeePercentUpdated: TypedContractEvent<
      FeePercentUpdatedEvent.InputTuple,
      FeePercentUpdatedEvent.OutputTuple,
      FeePercentUpdatedEvent.OutputObject
    >;

    "FeePoolAddressUpdated(address)": TypedContractEvent<
      FeePoolAddressUpdatedEvent.InputTuple,
      FeePoolAddressUpdatedEvent.OutputTuple,
      FeePoolAddressUpdatedEvent.OutputObject
    >;
    FeePoolAddressUpdated: TypedContractEvent<
      FeePoolAddressUpdatedEvent.InputTuple,
      FeePoolAddressUpdatedEvent.OutputTuple,
      FeePoolAddressUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Pause()": TypedContractEvent<
      PauseEvent.InputTuple,
      PauseEvent.OutputTuple,
      PauseEvent.OutputObject
    >;
    Pause: TypedContractEvent<
      PauseEvent.InputTuple,
      PauseEvent.OutputTuple,
      PauseEvent.OutputObject
    >;

    "Unpause()": TypedContractEvent<
      UnpauseEvent.InputTuple,
      UnpauseEvent.OutputTuple,
      UnpauseEvent.OutputObject
    >;
    Unpause: TypedContractEvent<
      UnpauseEvent.InputTuple,
      UnpauseEvent.OutputTuple,
      UnpauseEvent.OutputObject
    >;
  };
}
