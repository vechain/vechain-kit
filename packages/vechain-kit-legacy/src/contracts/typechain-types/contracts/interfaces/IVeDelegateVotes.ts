/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IVeDelegateVotes {
  export type VoteStruct = { ids: BytesLike[]; percentages: BigNumberish[] };

  export type VoteStructOutput = [ids: string[], percentages: bigint[]] & {
    ids: string[];
    percentages: bigint[];
  };
}

export interface IVeDelegateVotesInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "calculateVoteWeights"
      | "castVotes"
      | "getVotes"
      | "getVotesWithFallback"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "calculateVoteWeights",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "castVotes",
    values: [BytesLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotesWithFallback",
    values: [AddressLike[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateVoteWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "castVotes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVotes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVotesWithFallback",
    data: BytesLike
  ): Result;
}

export interface IVeDelegateVotes extends BaseContract {
  connect(runner?: ContractRunner | null): IVeDelegateVotes;
  waitForDeployment(): Promise<this>;

  interface: IVeDelegateVotesInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  calculateVoteWeights: TypedContractMethod<
    [availableVotes: BigNumberish, percentages: BigNumberish[]],
    [bigint[]],
    "view"
  >;

  castVotes: TypedContractMethod<
    [_appIds: BytesLike[], _percentages: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  getVotes: TypedContractMethod<
    [voter: AddressLike],
    [IVeDelegateVotes.VoteStructOutput],
    "view"
  >;

  getVotesWithFallback: TypedContractMethod<
    [voters: AddressLike[]],
    [IVeDelegateVotes.VoteStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "calculateVoteWeights"
  ): TypedContractMethod<
    [availableVotes: BigNumberish, percentages: BigNumberish[]],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "castVotes"
  ): TypedContractMethod<
    [_appIds: BytesLike[], _percentages: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getVotes"
  ): TypedContractMethod<
    [voter: AddressLike],
    [IVeDelegateVotes.VoteStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVotesWithFallback"
  ): TypedContractMethod<
    [voters: AddressLike[]],
    [IVeDelegateVotes.VoteStructOutput],
    "view"
  >;

  filters: {};
}
