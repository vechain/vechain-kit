/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ITreasuryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "b3trAddress"
      | "convertB3TR"
      | "convertVOT3"
      | "getB3TRBalance"
      | "getCollectionNFTBalance"
      | "getTokenBalance"
      | "getVETBalance"
      | "getVOT3Balance"
      | "getVTHOBalance"
      | "pause"
      | "transferB3TR"
      | "transferNFT"
      | "transferTokens"
      | "transferVET"
      | "transferVOT3"
      | "transferVTHO"
      | "unpause"
      | "version"
      | "vot3Address"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "TransferLimitUpdated" | "TransferLimitVETUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "b3trAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "convertB3TR",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertVOT3",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getB3TRBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollectionNFTBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVETBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVOT3Balance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVTHOBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferB3TR",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferNFT",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferTokens",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferVET",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferVOT3",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferVTHO",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vot3Address",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "b3trAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertB3TR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertVOT3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getB3TRBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollectionNFTBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVETBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVOT3Balance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVTHOBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferB3TR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferVET",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferVOT3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferVTHO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vot3Address",
    data: BytesLike
  ): Result;
}

export namespace TransferLimitUpdatedEvent {
  export type InputTuple = [token: AddressLike, limit: BigNumberish];
  export type OutputTuple = [token: string, limit: bigint];
  export interface OutputObject {
    token: string;
    limit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferLimitVETUpdatedEvent {
  export type InputTuple = [limit: BigNumberish];
  export type OutputTuple = [limit: bigint];
  export interface OutputObject {
    limit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ITreasury extends BaseContract {
  connect(runner?: ContractRunner | null): ITreasury;
  waitForDeployment(): Promise<this>;

  interface: ITreasuryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  b3trAddress: TypedContractMethod<[], [string], "view">;

  convertB3TR: TypedContractMethod<
    [_b3trAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  convertVOT3: TypedContractMethod<
    [__vot3Amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getB3TRBalance: TypedContractMethod<[], [bigint], "view">;

  getCollectionNFTBalance: TypedContractMethod<
    [_nft: AddressLike],
    [bigint],
    "view"
  >;

  getTokenBalance: TypedContractMethod<[_token: AddressLike], [bigint], "view">;

  getVETBalance: TypedContractMethod<[], [bigint], "view">;

  getVOT3Balance: TypedContractMethod<[], [bigint], "view">;

  getVTHOBalance: TypedContractMethod<[], [bigint], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  transferB3TR: TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferNFT: TypedContractMethod<
    [_nft: AddressLike, _to: AddressLike, _tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferTokens: TypedContractMethod<
    [_token: AddressLike, _to: AddressLike, _value: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferVET: TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferVOT3: TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferVTHO: TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  version: TypedContractMethod<[], [string], "view">;

  vot3Address: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "b3trAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "convertB3TR"
  ): TypedContractMethod<[_b3trAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "convertVOT3"
  ): TypedContractMethod<[__vot3Amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getB3TRBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCollectionNFTBalance"
  ): TypedContractMethod<[_nft: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenBalance"
  ): TypedContractMethod<[_token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVETBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVOT3Balance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVTHOBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferB3TR"
  ): TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferNFT"
  ): TypedContractMethod<
    [_nft: AddressLike, _to: AddressLike, _tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferTokens"
  ): TypedContractMethod<
    [_token: AddressLike, _to: AddressLike, _value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferVET"
  ): TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferVOT3"
  ): TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferVTHO"
  ): TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "vot3Address"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "TransferLimitUpdated"
  ): TypedContractEvent<
    TransferLimitUpdatedEvent.InputTuple,
    TransferLimitUpdatedEvent.OutputTuple,
    TransferLimitUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TransferLimitVETUpdated"
  ): TypedContractEvent<
    TransferLimitVETUpdatedEvent.InputTuple,
    TransferLimitVETUpdatedEvent.OutputTuple,
    TransferLimitVETUpdatedEvent.OutputObject
  >;

  filters: {
    "TransferLimitUpdated(address,uint256)": TypedContractEvent<
      TransferLimitUpdatedEvent.InputTuple,
      TransferLimitUpdatedEvent.OutputTuple,
      TransferLimitUpdatedEvent.OutputObject
    >;
    TransferLimitUpdated: TypedContractEvent<
      TransferLimitUpdatedEvent.InputTuple,
      TransferLimitUpdatedEvent.OutputTuple,
      TransferLimitUpdatedEvent.OutputObject
    >;

    "TransferLimitVETUpdated(uint256)": TypedContractEvent<
      TransferLimitVETUpdatedEvent.InputTuple,
      TransferLimitVETUpdatedEvent.OutputTuple,
      TransferLimitVETUpdatedEvent.OutputObject
    >;
    TransferLimitVETUpdated: TypedContractEvent<
      TransferLimitVETUpdatedEvent.InputTuple,
      TransferLimitVETUpdatedEvent.OutputTuple,
      TransferLimitVETUpdatedEvent.OutputObject
    >;
  };
}
