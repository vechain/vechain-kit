/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IVechainEnergyOracleV1Interface extends Interface {
  getFunction(
    nameOrSignature: "getLatestValue" | "updateValueWithProof"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ValueUpdate"): EventFragment;

  encodeFunctionData(
    functionFragment: "getLatestValue",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateValueWithProof",
    values: [BytesLike, BytesLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getLatestValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateValueWithProof",
    data: BytesLike
  ): Result;
}

export namespace ValueUpdateEvent {
  export type InputTuple = [
    id: BytesLike,
    value: BigNumberish,
    updatedAt: BigNumberish
  ];
  export type OutputTuple = [id: string, value: bigint, updatedAt: bigint];
  export interface OutputObject {
    id: string;
    value: bigint;
    updatedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IVechainEnergyOracleV1 extends BaseContract {
  connect(runner?: ContractRunner | null): IVechainEnergyOracleV1;
  waitForDeployment(): Promise<this>;

  interface: IVechainEnergyOracleV1Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getLatestValue: TypedContractMethod<
    [id: BytesLike],
    [[bigint, bigint] & { value: bigint; updatedAt: bigint }],
    "view"
  >;

  updateValueWithProof: TypedContractMethod<
    [message: BytesLike, extraData: BytesLike, signedFor: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getLatestValue"
  ): TypedContractMethod<
    [id: BytesLike],
    [[bigint, bigint] & { value: bigint; updatedAt: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateValueWithProof"
  ): TypedContractMethod<
    [message: BytesLike, extraData: BytesLike, signedFor: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ValueUpdate"
  ): TypedContractEvent<
    ValueUpdateEvent.InputTuple,
    ValueUpdateEvent.OutputTuple,
    ValueUpdateEvent.OutputObject
  >;

  filters: {
    "ValueUpdate(bytes32,uint128,uint128)": TypedContractEvent<
      ValueUpdateEvent.InputTuple,
      ValueUpdateEvent.OutputTuple,
      ValueUpdateEvent.OutputObject
    >;
    ValueUpdate: TypedContractEvent<
      ValueUpdateEvent.InputTuple,
      ValueUpdateEvent.OutputTuple,
      ValueUpdateEvent.OutputObject
    >;
  };
}
