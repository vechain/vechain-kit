/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../../common";

export interface PassportEntityLogicInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic: "LinkCreated" | "LinkPending" | "LinkRemoved"
  ): EventFragment;
}

export namespace LinkCreatedEvent {
  export type InputTuple = [entity: AddressLike, passport: AddressLike];
  export type OutputTuple = [entity: string, passport: string];
  export interface OutputObject {
    entity: string;
    passport: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LinkPendingEvent {
  export type InputTuple = [entity: AddressLike, passport: AddressLike];
  export type OutputTuple = [entity: string, passport: string];
  export interface OutputObject {
    entity: string;
    passport: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LinkRemovedEvent {
  export type InputTuple = [entity: AddressLike, passport: AddressLike];
  export type OutputTuple = [entity: string, passport: string];
  export interface OutputObject {
    entity: string;
    passport: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PassportEntityLogic extends BaseContract {
  connect(runner?: ContractRunner | null): PassportEntityLogic;
  waitForDeployment(): Promise<this>;

  interface: PassportEntityLogicInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "LinkCreated"
  ): TypedContractEvent<
    LinkCreatedEvent.InputTuple,
    LinkCreatedEvent.OutputTuple,
    LinkCreatedEvent.OutputObject
  >;
  getEvent(
    key: "LinkPending"
  ): TypedContractEvent<
    LinkPendingEvent.InputTuple,
    LinkPendingEvent.OutputTuple,
    LinkPendingEvent.OutputObject
  >;
  getEvent(
    key: "LinkRemoved"
  ): TypedContractEvent<
    LinkRemovedEvent.InputTuple,
    LinkRemovedEvent.OutputTuple,
    LinkRemovedEvent.OutputObject
  >;

  filters: {
    "LinkCreated(address,address)": TypedContractEvent<
      LinkCreatedEvent.InputTuple,
      LinkCreatedEvent.OutputTuple,
      LinkCreatedEvent.OutputObject
    >;
    LinkCreated: TypedContractEvent<
      LinkCreatedEvent.InputTuple,
      LinkCreatedEvent.OutputTuple,
      LinkCreatedEvent.OutputObject
    >;

    "LinkPending(address,address)": TypedContractEvent<
      LinkPendingEvent.InputTuple,
      LinkPendingEvent.OutputTuple,
      LinkPendingEvent.OutputObject
    >;
    LinkPending: TypedContractEvent<
      LinkPendingEvent.InputTuple,
      LinkPendingEvent.OutputTuple,
      LinkPendingEvent.OutputObject
    >;

    "LinkRemoved(address,address)": TypedContractEvent<
      LinkRemovedEvent.InputTuple,
      LinkRemovedEvent.OutputTuple,
      LinkRemovedEvent.OutputObject
    >;
    LinkRemoved: TypedContractEvent<
      LinkRemovedEvent.InputTuple,
      LinkRemovedEvent.OutputTuple,
      LinkRemovedEvent.OutputObject
    >;
  };
}
