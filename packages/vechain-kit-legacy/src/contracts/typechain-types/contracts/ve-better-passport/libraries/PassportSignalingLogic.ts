/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../../common";

export interface PassportSignalingLogicInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "SignalerAssignedToApp"
      | "SignalerRemovedFromApp"
      | "UserSignaled"
      | "UserSignalsReset"
      | "UserSignalsResetForApp"
  ): EventFragment;
}

export namespace SignalerAssignedToAppEvent {
  export type InputTuple = [signaler: AddressLike, app: BytesLike];
  export type OutputTuple = [signaler: string, app: string];
  export interface OutputObject {
    signaler: string;
    app: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SignalerRemovedFromAppEvent {
  export type InputTuple = [signaler: AddressLike, app: BytesLike];
  export type OutputTuple = [signaler: string, app: string];
  export interface OutputObject {
    signaler: string;
    app: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserSignaledEvent {
  export type InputTuple = [
    user: AddressLike,
    signaler: AddressLike,
    app: BytesLike,
    reason: string
  ];
  export type OutputTuple = [
    user: string,
    signaler: string,
    app: string,
    reason: string
  ];
  export interface OutputObject {
    user: string;
    signaler: string;
    app: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserSignalsResetEvent {
  export type InputTuple = [user: AddressLike, reason: string];
  export type OutputTuple = [user: string, reason: string];
  export interface OutputObject {
    user: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserSignalsResetForAppEvent {
  export type InputTuple = [user: AddressLike, app: BytesLike, reason: string];
  export type OutputTuple = [user: string, app: string, reason: string];
  export interface OutputObject {
    user: string;
    app: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PassportSignalingLogic extends BaseContract {
  connect(runner?: ContractRunner | null): PassportSignalingLogic;
  waitForDeployment(): Promise<this>;

  interface: PassportSignalingLogicInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "SignalerAssignedToApp"
  ): TypedContractEvent<
    SignalerAssignedToAppEvent.InputTuple,
    SignalerAssignedToAppEvent.OutputTuple,
    SignalerAssignedToAppEvent.OutputObject
  >;
  getEvent(
    key: "SignalerRemovedFromApp"
  ): TypedContractEvent<
    SignalerRemovedFromAppEvent.InputTuple,
    SignalerRemovedFromAppEvent.OutputTuple,
    SignalerRemovedFromAppEvent.OutputObject
  >;
  getEvent(
    key: "UserSignaled"
  ): TypedContractEvent<
    UserSignaledEvent.InputTuple,
    UserSignaledEvent.OutputTuple,
    UserSignaledEvent.OutputObject
  >;
  getEvent(
    key: "UserSignalsReset"
  ): TypedContractEvent<
    UserSignalsResetEvent.InputTuple,
    UserSignalsResetEvent.OutputTuple,
    UserSignalsResetEvent.OutputObject
  >;
  getEvent(
    key: "UserSignalsResetForApp"
  ): TypedContractEvent<
    UserSignalsResetForAppEvent.InputTuple,
    UserSignalsResetForAppEvent.OutputTuple,
    UserSignalsResetForAppEvent.OutputObject
  >;

  filters: {
    "SignalerAssignedToApp(address,bytes32)": TypedContractEvent<
      SignalerAssignedToAppEvent.InputTuple,
      SignalerAssignedToAppEvent.OutputTuple,
      SignalerAssignedToAppEvent.OutputObject
    >;
    SignalerAssignedToApp: TypedContractEvent<
      SignalerAssignedToAppEvent.InputTuple,
      SignalerAssignedToAppEvent.OutputTuple,
      SignalerAssignedToAppEvent.OutputObject
    >;

    "SignalerRemovedFromApp(address,bytes32)": TypedContractEvent<
      SignalerRemovedFromAppEvent.InputTuple,
      SignalerRemovedFromAppEvent.OutputTuple,
      SignalerRemovedFromAppEvent.OutputObject
    >;
    SignalerRemovedFromApp: TypedContractEvent<
      SignalerRemovedFromAppEvent.InputTuple,
      SignalerRemovedFromAppEvent.OutputTuple,
      SignalerRemovedFromAppEvent.OutputObject
    >;

    "UserSignaled(address,address,bytes32,string)": TypedContractEvent<
      UserSignaledEvent.InputTuple,
      UserSignaledEvent.OutputTuple,
      UserSignaledEvent.OutputObject
    >;
    UserSignaled: TypedContractEvent<
      UserSignaledEvent.InputTuple,
      UserSignaledEvent.OutputTuple,
      UserSignaledEvent.OutputObject
    >;

    "UserSignalsReset(address,string)": TypedContractEvent<
      UserSignalsResetEvent.InputTuple,
      UserSignalsResetEvent.OutputTuple,
      UserSignalsResetEvent.OutputObject
    >;
    UserSignalsReset: TypedContractEvent<
      UserSignalsResetEvent.InputTuple,
      UserSignalsResetEvent.OutputTuple,
      UserSignalsResetEvent.OutputObject
    >;

    "UserSignalsResetForApp(address,bytes32,string)": TypedContractEvent<
      UserSignalsResetForAppEvent.InputTuple,
      UserSignalsResetForAppEvent.OutputTuple,
      UserSignalsResetForAppEvent.OutputObject
    >;
    UserSignalsResetForApp: TypedContractEvent<
      UserSignalsResetForAppEvent.InputTuple,
      UserSignalsResetForAppEvent.OutputTuple,
      UserSignalsResetForAppEvent.OutputObject
    >;
  };
}
