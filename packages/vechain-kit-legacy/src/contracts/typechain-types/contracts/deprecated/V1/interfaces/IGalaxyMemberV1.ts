/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export declare namespace Checkpoints {
  export type Checkpoint208Struct = {
    _key: BigNumberish;
    _value: BigNumberish;
  };

  export type Checkpoint208StructOutput = [_key: bigint, _value: bigint] & {
    _key: bigint;
    _value: bigint;
  };
}

export interface IGalaxyMemberV1Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "CLOCK_MODE"
      | "DEFAULT_ADMIN_ROLE"
      | "MAX_LEVEL"
      | "UPGRADER_ROLE"
      | "UPGRADE_INTERFACE_VERSION"
      | "approve"
      | "b3tr"
      | "b3trGovernor"
      | "balanceOf"
      | "baseURI"
      | "checkpoints"
      | "clock"
      | "freeMint"
      | "getApproved"
      | "getB3TRtoUpgrade"
      | "getB3TRtoUpgradeToLevel"
      | "getHighestLevel"
      | "getMaxMintableLevelOfXNode"
      | "getNextLevel"
      | "getPastHighestLevel"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isApprovedForAll"
      | "levelOf"
      | "name"
      | "numCheckpoints"
      | "ownerOf"
      | "participatedInGovernance"
      | "pause"
      | "paused"
      | "proxiableUUID"
      | "renounceRole"
      | "revokeRole"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "selectHighestLevel"
      | "setApprovalForAll"
      | "setB3TRtoUpgradeToLevel"
      | "setB3trGovernorAddress"
      | "setBaseURI"
      | "setMaxLevel"
      | "setMaxMintableLevels"
      | "setXAllocationsGovernorAddress"
      | "supportsInterface"
      | "symbol"
      | "tokenByIndex"
      | "tokenOfOwnerByIndex"
      | "tokenURI"
      | "totalSupply"
      | "transferFrom"
      | "treasury"
      | "unpause"
      | "upgrade"
      | "upgradeToAndCall"
      | "version"
      | "xAllocationsGovernor"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "B3TRtoUpgradeToLevelUpdated"
      | "B3trGovernorAddressUpdated"
      | "BaseURIUpdated"
      | "Initialized"
      | "MaxLevelUpdated"
      | "Paused"
      | "PublicMintingPaused"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Selected"
      | "SelectedLevel"
      | "Transfer"
      | "Unpaused"
      | "Upgraded(address)"
      | "Upgraded(uint256,uint256,uint256)"
      | "XAllocationsGovernorAddressUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CLOCK_MODE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MAX_LEVEL", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "UPGRADER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "b3tr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "b3trGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "checkpoints",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "clock", values?: undefined): string;
  encodeFunctionData(functionFragment: "freeMint", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getB3TRtoUpgrade",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getB3TRtoUpgradeToLevel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHighestLevel",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxMintableLevelOfXNode",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextLevel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPastHighestLevel",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      AddressLike,
      AddressLike,
      BigNumberish,
      string,
      BigNumberish[],
      BigNumberish[],
      AddressLike,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "levelOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "numCheckpoints",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "participatedInGovernance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "selectHighestLevel",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setB3TRtoUpgradeToLevel",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setB3trGovernorAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setMaxLevel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxMintableLevels",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setXAllocationsGovernorAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "upgrade",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "xAllocationsGovernor",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "CLOCK_MODE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_LEVEL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "b3tr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "b3trGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "clock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "freeMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getB3TRtoUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getB3TRtoUpgradeToLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHighestLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxMintableLevelOfXNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPastHighestLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "levelOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numCheckpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "participatedInGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selectHighestLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setB3TRtoUpgradeToLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setB3trGovernorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxMintableLevels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setXAllocationsGovernorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "xAllocationsGovernor",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace B3TRtoUpgradeToLevelUpdatedEvent {
  export type InputTuple = [b3trToUpgradeToLevel: BigNumberish[]];
  export type OutputTuple = [b3trToUpgradeToLevel: bigint[]];
  export interface OutputObject {
    b3trToUpgradeToLevel: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace B3trGovernorAddressUpdatedEvent {
  export type InputTuple = [newAddress: AddressLike, oldAddress: AddressLike];
  export type OutputTuple = [newAddress: string, oldAddress: string];
  export interface OutputObject {
    newAddress: string;
    oldAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BaseURIUpdatedEvent {
  export type InputTuple = [newBaseURI: string, oldBaseURI: string];
  export type OutputTuple = [newBaseURI: string, oldBaseURI: string];
  export interface OutputObject {
    newBaseURI: string;
    oldBaseURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxLevelUpdatedEvent {
  export type InputTuple = [oldLevel: BigNumberish, newLevel: BigNumberish];
  export type OutputTuple = [oldLevel: bigint, newLevel: bigint];
  export interface OutputObject {
    oldLevel: bigint;
    newLevel: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PublicMintingPausedEvent {
  export type InputTuple = [isPaused: boolean];
  export type OutputTuple = [isPaused: boolean];
  export interface OutputObject {
    isPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SelectedEvent {
  export type InputTuple = [owner: AddressLike, tokenId: BigNumberish];
  export type OutputTuple = [owner: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SelectedLevelEvent {
  export type InputTuple = [
    owner: AddressLike,
    oldLevel: BigNumberish,
    newLevel: BigNumberish
  ];
  export type OutputTuple = [owner: string, oldLevel: bigint, newLevel: bigint];
  export interface OutputObject {
    owner: string;
    oldLevel: bigint;
    newLevel: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace Upgraded_address_Event {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace Upgraded_uint256_uint256_uint256_Event {
  export type InputTuple = [
    tokenId: BigNumberish,
    oldLevel: BigNumberish,
    newLevel: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    oldLevel: bigint,
    newLevel: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    oldLevel: bigint;
    newLevel: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace XAllocationsGovernorAddressUpdatedEvent {
  export type InputTuple = [newAddress: AddressLike, oldAddress: AddressLike];
  export type OutputTuple = [newAddress: string, oldAddress: string];
  export interface OutputObject {
    newAddress: string;
    oldAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IGalaxyMemberV1 extends BaseContract {
  connect(runner?: ContractRunner | null): IGalaxyMemberV1;
  waitForDeployment(): Promise<this>;

  interface: IGalaxyMemberV1Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CLOCK_MODE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  MAX_LEVEL: TypedContractMethod<[], [bigint], "view">;

  UPGRADER_ROLE: TypedContractMethod<[], [string], "view">;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  b3tr: TypedContractMethod<[], [string], "view">;

  b3trGovernor: TypedContractMethod<[], [string], "view">;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  baseURI: TypedContractMethod<[], [string], "view">;

  checkpoints: TypedContractMethod<
    [account: AddressLike, pos: BigNumberish],
    [Checkpoints.Checkpoint208StructOutput],
    "view"
  >;

  clock: TypedContractMethod<[], [bigint], "view">;

  freeMint: TypedContractMethod<[], [void], "nonpayable">;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getB3TRtoUpgrade: TypedContractMethod<
    [tokenId: BigNumberish],
    [bigint],
    "view"
  >;

  getB3TRtoUpgradeToLevel: TypedContractMethod<
    [level: BigNumberish],
    [bigint],
    "view"
  >;

  getHighestLevel: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  getMaxMintableLevelOfXNode: TypedContractMethod<
    [xNodeType: BigNumberish],
    [bigint],
    "view"
  >;

  getNextLevel: TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;

  getPastHighestLevel: TypedContractMethod<
    [owner: AddressLike, timepoint: BigNumberish],
    [bigint],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      name: string,
      symbol: string,
      admin: AddressLike,
      upgrader: AddressLike,
      maxLevel: BigNumberish,
      baseTokenURI: string,
      xNodeMaxMintableLevels: BigNumberish[],
      b3trToUpgradeToLevel: BigNumberish[],
      _b3tr: AddressLike,
      _treasury: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  levelOf: TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  numCheckpoints: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  participatedInGovernance: TypedContractMethod<
    [user: AddressLike],
    [boolean],
    "view"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  selectHighestLevel: TypedContractMethod<[], [void], "nonpayable">;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setB3TRtoUpgradeToLevel: TypedContractMethod<
    [b3trToUpgradeToLevel: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  setB3trGovernorAddress: TypedContractMethod<
    [_b3trGovernor: AddressLike],
    [void],
    "nonpayable"
  >;

  setBaseURI: TypedContractMethod<[baseTokenURI: string], [void], "nonpayable">;

  setMaxLevel: TypedContractMethod<[level: BigNumberish], [void], "nonpayable">;

  setMaxMintableLevels: TypedContractMethod<
    [maxMintableLevels: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  setXAllocationsGovernorAddress: TypedContractMethod<
    [_xAllocationsGovernor: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenByIndex: TypedContractMethod<[index: BigNumberish], [bigint], "view">;

  tokenOfOwnerByIndex: TypedContractMethod<
    [owner: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  treasury: TypedContractMethod<[], [string], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  upgrade: TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  version: TypedContractMethod<[], [string], "view">;

  xAllocationsGovernor: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CLOCK_MODE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAX_LEVEL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "UPGRADER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "b3tr"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "b3trGovernor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "checkpoints"
  ): TypedContractMethod<
    [account: AddressLike, pos: BigNumberish],
    [Checkpoints.Checkpoint208StructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "clock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "freeMint"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getB3TRtoUpgrade"
  ): TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getB3TRtoUpgradeToLevel"
  ): TypedContractMethod<[level: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getHighestLevel"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMaxMintableLevelOfXNode"
  ): TypedContractMethod<[xNodeType: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNextLevel"
  ): TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPastHighestLevel"
  ): TypedContractMethod<
    [owner: AddressLike, timepoint: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      name: string,
      symbol: string,
      admin: AddressLike,
      upgrader: AddressLike,
      maxLevel: BigNumberish,
      baseTokenURI: string,
      xNodeMaxMintableLevels: BigNumberish[],
      b3trToUpgradeToLevel: BigNumberish[],
      _b3tr: AddressLike,
      _treasury: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "levelOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "numCheckpoints"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "participatedInGovernance"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "selectHighestLevel"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setB3TRtoUpgradeToLevel"
  ): TypedContractMethod<
    [b3trToUpgradeToLevel: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setB3trGovernorAddress"
  ): TypedContractMethod<[_b3trGovernor: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBaseURI"
  ): TypedContractMethod<[baseTokenURI: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxLevel"
  ): TypedContractMethod<[level: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxMintableLevels"
  ): TypedContractMethod<
    [maxMintableLevels: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setXAllocationsGovernorAddress"
  ): TypedContractMethod<
    [_xAllocationsGovernor: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenByIndex"
  ): TypedContractMethod<[index: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenOfOwnerByIndex"
  ): TypedContractMethod<
    [owner: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgrade"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "xAllocationsGovernor"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "B3TRtoUpgradeToLevelUpdated"
  ): TypedContractEvent<
    B3TRtoUpgradeToLevelUpdatedEvent.InputTuple,
    B3TRtoUpgradeToLevelUpdatedEvent.OutputTuple,
    B3TRtoUpgradeToLevelUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "B3trGovernorAddressUpdated"
  ): TypedContractEvent<
    B3trGovernorAddressUpdatedEvent.InputTuple,
    B3trGovernorAddressUpdatedEvent.OutputTuple,
    B3trGovernorAddressUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "BaseURIUpdated"
  ): TypedContractEvent<
    BaseURIUpdatedEvent.InputTuple,
    BaseURIUpdatedEvent.OutputTuple,
    BaseURIUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "MaxLevelUpdated"
  ): TypedContractEvent<
    MaxLevelUpdatedEvent.InputTuple,
    MaxLevelUpdatedEvent.OutputTuple,
    MaxLevelUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PublicMintingPaused"
  ): TypedContractEvent<
    PublicMintingPausedEvent.InputTuple,
    PublicMintingPausedEvent.OutputTuple,
    PublicMintingPausedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Selected"
  ): TypedContractEvent<
    SelectedEvent.InputTuple,
    SelectedEvent.OutputTuple,
    SelectedEvent.OutputObject
  >;
  getEvent(
    key: "SelectedLevel"
  ): TypedContractEvent<
    SelectedLevelEvent.InputTuple,
    SelectedLevelEvent.OutputTuple,
    SelectedLevelEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded(address)"
  ): TypedContractEvent<
    Upgraded_address_Event.InputTuple,
    Upgraded_address_Event.OutputTuple,
    Upgraded_address_Event.OutputObject
  >;
  getEvent(
    key: "Upgraded(uint256,uint256,uint256)"
  ): TypedContractEvent<
    Upgraded_uint256_uint256_uint256_Event.InputTuple,
    Upgraded_uint256_uint256_uint256_Event.OutputTuple,
    Upgraded_uint256_uint256_uint256_Event.OutputObject
  >;
  getEvent(
    key: "XAllocationsGovernorAddressUpdated"
  ): TypedContractEvent<
    XAllocationsGovernorAddressUpdatedEvent.InputTuple,
    XAllocationsGovernorAddressUpdatedEvent.OutputTuple,
    XAllocationsGovernorAddressUpdatedEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "B3TRtoUpgradeToLevelUpdated(uint256[])": TypedContractEvent<
      B3TRtoUpgradeToLevelUpdatedEvent.InputTuple,
      B3TRtoUpgradeToLevelUpdatedEvent.OutputTuple,
      B3TRtoUpgradeToLevelUpdatedEvent.OutputObject
    >;
    B3TRtoUpgradeToLevelUpdated: TypedContractEvent<
      B3TRtoUpgradeToLevelUpdatedEvent.InputTuple,
      B3TRtoUpgradeToLevelUpdatedEvent.OutputTuple,
      B3TRtoUpgradeToLevelUpdatedEvent.OutputObject
    >;

    "B3trGovernorAddressUpdated(address,address)": TypedContractEvent<
      B3trGovernorAddressUpdatedEvent.InputTuple,
      B3trGovernorAddressUpdatedEvent.OutputTuple,
      B3trGovernorAddressUpdatedEvent.OutputObject
    >;
    B3trGovernorAddressUpdated: TypedContractEvent<
      B3trGovernorAddressUpdatedEvent.InputTuple,
      B3trGovernorAddressUpdatedEvent.OutputTuple,
      B3trGovernorAddressUpdatedEvent.OutputObject
    >;

    "BaseURIUpdated(string,string)": TypedContractEvent<
      BaseURIUpdatedEvent.InputTuple,
      BaseURIUpdatedEvent.OutputTuple,
      BaseURIUpdatedEvent.OutputObject
    >;
    BaseURIUpdated: TypedContractEvent<
      BaseURIUpdatedEvent.InputTuple,
      BaseURIUpdatedEvent.OutputTuple,
      BaseURIUpdatedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "MaxLevelUpdated(uint256,uint256)": TypedContractEvent<
      MaxLevelUpdatedEvent.InputTuple,
      MaxLevelUpdatedEvent.OutputTuple,
      MaxLevelUpdatedEvent.OutputObject
    >;
    MaxLevelUpdated: TypedContractEvent<
      MaxLevelUpdatedEvent.InputTuple,
      MaxLevelUpdatedEvent.OutputTuple,
      MaxLevelUpdatedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PublicMintingPaused(bool)": TypedContractEvent<
      PublicMintingPausedEvent.InputTuple,
      PublicMintingPausedEvent.OutputTuple,
      PublicMintingPausedEvent.OutputObject
    >;
    PublicMintingPaused: TypedContractEvent<
      PublicMintingPausedEvent.InputTuple,
      PublicMintingPausedEvent.OutputTuple,
      PublicMintingPausedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Selected(address,uint256)": TypedContractEvent<
      SelectedEvent.InputTuple,
      SelectedEvent.OutputTuple,
      SelectedEvent.OutputObject
    >;
    Selected: TypedContractEvent<
      SelectedEvent.InputTuple,
      SelectedEvent.OutputTuple,
      SelectedEvent.OutputObject
    >;

    "SelectedLevel(address,uint256,uint256)": TypedContractEvent<
      SelectedLevelEvent.InputTuple,
      SelectedLevelEvent.OutputTuple,
      SelectedLevelEvent.OutputObject
    >;
    SelectedLevel: TypedContractEvent<
      SelectedLevelEvent.InputTuple,
      SelectedLevelEvent.OutputTuple,
      SelectedLevelEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      Upgraded_address_Event.InputTuple,
      Upgraded_address_Event.OutputTuple,
      Upgraded_address_Event.OutputObject
    >;
    "Upgraded(uint256,uint256,uint256)": TypedContractEvent<
      Upgraded_uint256_uint256_uint256_Event.InputTuple,
      Upgraded_uint256_uint256_uint256_Event.OutputTuple,
      Upgraded_uint256_uint256_uint256_Event.OutputObject
    >;

    "XAllocationsGovernorAddressUpdated(address,address)": TypedContractEvent<
      XAllocationsGovernorAddressUpdatedEvent.InputTuple,
      XAllocationsGovernorAddressUpdatedEvent.OutputTuple,
      XAllocationsGovernorAddressUpdatedEvent.OutputObject
    >;
    XAllocationsGovernorAddressUpdated: TypedContractEvent<
      XAllocationsGovernorAddressUpdatedEvent.InputTuple,
      XAllocationsGovernorAddressUpdatedEvent.OutputTuple,
      XAllocationsGovernorAddressUpdatedEvent.OutputObject
    >;
  };
}
