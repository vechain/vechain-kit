/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../../../../common";

export interface PassportWhitelistAndBlacklistLogicV1Interface
  extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "RemovedUserFromBlacklist"
      | "RemovedUserFromWhitelist"
      | "UserBlacklisted"
      | "UserWhitelisted"
  ): EventFragment;
}

export namespace RemovedUserFromBlacklistEvent {
  export type InputTuple = [user: AddressLike, removedBy: AddressLike];
  export type OutputTuple = [user: string, removedBy: string];
  export interface OutputObject {
    user: string;
    removedBy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemovedUserFromWhitelistEvent {
  export type InputTuple = [user: AddressLike, removedBy: AddressLike];
  export type OutputTuple = [user: string, removedBy: string];
  export interface OutputObject {
    user: string;
    removedBy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserBlacklistedEvent {
  export type InputTuple = [user: AddressLike, blacklistedBy: AddressLike];
  export type OutputTuple = [user: string, blacklistedBy: string];
  export interface OutputObject {
    user: string;
    blacklistedBy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserWhitelistedEvent {
  export type InputTuple = [user: AddressLike, whitelistedBy: AddressLike];
  export type OutputTuple = [user: string, whitelistedBy: string];
  export interface OutputObject {
    user: string;
    whitelistedBy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PassportWhitelistAndBlacklistLogicV1 extends BaseContract {
  connect(runner?: ContractRunner | null): PassportWhitelistAndBlacklistLogicV1;
  waitForDeployment(): Promise<this>;

  interface: PassportWhitelistAndBlacklistLogicV1Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "RemovedUserFromBlacklist"
  ): TypedContractEvent<
    RemovedUserFromBlacklistEvent.InputTuple,
    RemovedUserFromBlacklistEvent.OutputTuple,
    RemovedUserFromBlacklistEvent.OutputObject
  >;
  getEvent(
    key: "RemovedUserFromWhitelist"
  ): TypedContractEvent<
    RemovedUserFromWhitelistEvent.InputTuple,
    RemovedUserFromWhitelistEvent.OutputTuple,
    RemovedUserFromWhitelistEvent.OutputObject
  >;
  getEvent(
    key: "UserBlacklisted"
  ): TypedContractEvent<
    UserBlacklistedEvent.InputTuple,
    UserBlacklistedEvent.OutputTuple,
    UserBlacklistedEvent.OutputObject
  >;
  getEvent(
    key: "UserWhitelisted"
  ): TypedContractEvent<
    UserWhitelistedEvent.InputTuple,
    UserWhitelistedEvent.OutputTuple,
    UserWhitelistedEvent.OutputObject
  >;

  filters: {
    "RemovedUserFromBlacklist(address,address)": TypedContractEvent<
      RemovedUserFromBlacklistEvent.InputTuple,
      RemovedUserFromBlacklistEvent.OutputTuple,
      RemovedUserFromBlacklistEvent.OutputObject
    >;
    RemovedUserFromBlacklist: TypedContractEvent<
      RemovedUserFromBlacklistEvent.InputTuple,
      RemovedUserFromBlacklistEvent.OutputTuple,
      RemovedUserFromBlacklistEvent.OutputObject
    >;

    "RemovedUserFromWhitelist(address,address)": TypedContractEvent<
      RemovedUserFromWhitelistEvent.InputTuple,
      RemovedUserFromWhitelistEvent.OutputTuple,
      RemovedUserFromWhitelistEvent.OutputObject
    >;
    RemovedUserFromWhitelist: TypedContractEvent<
      RemovedUserFromWhitelistEvent.InputTuple,
      RemovedUserFromWhitelistEvent.OutputTuple,
      RemovedUserFromWhitelistEvent.OutputObject
    >;

    "UserBlacklisted(address,address)": TypedContractEvent<
      UserBlacklistedEvent.InputTuple,
      UserBlacklistedEvent.OutputTuple,
      UserBlacklistedEvent.OutputObject
    >;
    UserBlacklisted: TypedContractEvent<
      UserBlacklistedEvent.InputTuple,
      UserBlacklistedEvent.OutputTuple,
      UserBlacklistedEvent.OutputObject
    >;

    "UserWhitelisted(address,address)": TypedContractEvent<
      UserWhitelistedEvent.InputTuple,
      UserWhitelistedEvent.OutputTuple,
      UserWhitelistedEvent.OutputObject
    >;
    UserWhitelisted: TypedContractEvent<
      UserWhitelistedEvent.InputTuple,
      UserWhitelistedEvent.OutputTuple,
      UserWhitelistedEvent.OutputObject
    >;
  };
}
