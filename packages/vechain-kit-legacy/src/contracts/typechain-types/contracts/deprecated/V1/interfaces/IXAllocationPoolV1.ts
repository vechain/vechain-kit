/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface IXAllocationPoolV1Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "baseAllocationAmount"
      | "claimableAmount"
      | "currentRoundEarnings"
      | "getAppShares"
      | "getMaxAppAllocation"
      | "roundEarnings"
      | "version"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "AllocationRewardsClaimed"): EventFragment;

  encodeFunctionData(
    functionFragment: "baseAllocationAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableAmount",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "currentRoundEarnings",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAppShares",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxAppAllocation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "roundEarnings",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "baseAllocationAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRoundEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAppShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxAppAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roundEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace AllocationRewardsClaimedEvent {
  export type InputTuple = [
    appId: BytesLike,
    roundId: BigNumberish,
    totalAmount: BigNumberish,
    recipient: AddressLike,
    caller: AddressLike,
    unallocatedAmount: BigNumberish,
    teamAllocationAmount: BigNumberish,
    rewardsAllocationAmount: BigNumberish
  ];
  export type OutputTuple = [
    appId: string,
    roundId: bigint,
    totalAmount: bigint,
    recipient: string,
    caller: string,
    unallocatedAmount: bigint,
    teamAllocationAmount: bigint,
    rewardsAllocationAmount: bigint
  ];
  export interface OutputObject {
    appId: string;
    roundId: bigint;
    totalAmount: bigint;
    recipient: string;
    caller: string;
    unallocatedAmount: bigint;
    teamAllocationAmount: bigint;
    rewardsAllocationAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IXAllocationPoolV1 extends BaseContract {
  connect(runner?: ContractRunner | null): IXAllocationPoolV1;
  waitForDeployment(): Promise<this>;

  interface: IXAllocationPoolV1Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  baseAllocationAmount: TypedContractMethod<
    [roundId: BigNumberish],
    [bigint],
    "view"
  >;

  claimableAmount: TypedContractMethod<
    [roundId: BigNumberish, appId: BytesLike],
    [
      [bigint, bigint, bigint, bigint] & {
        totalAmount: bigint;
        unallocatedAmount: bigint;
        teamAllocationAmount: bigint;
        x2EarnRewardsPoolAmount: bigint;
      }
    ],
    "view"
  >;

  currentRoundEarnings: TypedContractMethod<
    [appId: BytesLike],
    [bigint],
    "view"
  >;

  getAppShares: TypedContractMethod<
    [roundId: BigNumberish, appId: BytesLike],
    [[bigint, bigint]],
    "view"
  >;

  getMaxAppAllocation: TypedContractMethod<
    [roundId: BigNumberish],
    [bigint],
    "view"
  >;

  roundEarnings: TypedContractMethod<
    [roundId: BigNumberish, appId: BytesLike],
    [
      [bigint, bigint, bigint, bigint] & {
        totalAmount: bigint;
        unallocatedAmount: bigint;
        teamAllocationAmount: bigint;
        x2EarnRewardsPoolAmount: bigint;
      }
    ],
    "view"
  >;

  version: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "baseAllocationAmount"
  ): TypedContractMethod<[roundId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimableAmount"
  ): TypedContractMethod<
    [roundId: BigNumberish, appId: BytesLike],
    [
      [bigint, bigint, bigint, bigint] & {
        totalAmount: bigint;
        unallocatedAmount: bigint;
        teamAllocationAmount: bigint;
        x2EarnRewardsPoolAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "currentRoundEarnings"
  ): TypedContractMethod<[appId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAppShares"
  ): TypedContractMethod<
    [roundId: BigNumberish, appId: BytesLike],
    [[bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMaxAppAllocation"
  ): TypedContractMethod<[roundId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "roundEarnings"
  ): TypedContractMethod<
    [roundId: BigNumberish, appId: BytesLike],
    [
      [bigint, bigint, bigint, bigint] & {
        totalAmount: bigint;
        unallocatedAmount: bigint;
        teamAllocationAmount: bigint;
        x2EarnRewardsPoolAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AllocationRewardsClaimed"
  ): TypedContractEvent<
    AllocationRewardsClaimedEvent.InputTuple,
    AllocationRewardsClaimedEvent.OutputTuple,
    AllocationRewardsClaimedEvent.OutputObject
  >;

  filters: {
    "AllocationRewardsClaimed(bytes32,uint256,uint256,address,address,uint256,uint256,uint256)": TypedContractEvent<
      AllocationRewardsClaimedEvent.InputTuple,
      AllocationRewardsClaimedEvent.OutputTuple,
      AllocationRewardsClaimedEvent.OutputObject
    >;
    AllocationRewardsClaimed: TypedContractEvent<
      AllocationRewardsClaimedEvent.InputTuple,
      AllocationRewardsClaimedEvent.OutputTuple,
      AllocationRewardsClaimedEvent.OutputObject
    >;
  };
}
